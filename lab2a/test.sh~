#!/bin/bash
#
# sanity check script for Project 2A
#tarball name
#tarball contents
#student identification 
#makefile targets
#use of expected functions
#error free build
#make clean
#make dist
#make (default)
#unrecognized parameter
#recognizes standard parameters
#produces plausible outout
#
LAB="lab2a"
README="README"
MAKEFILE="Makefile"

SOURCES="lab2_add.c lab2_list.c SortedList.c SortedList.h"
DATA="lab2_add.csv lab2_list.csv"
GRAPHS="lab2_add-1.png lab2_add-2.png lab2_add-3.png lab2_add-4.png lab2_add-5.png lab2_list-1.png lab2_list-2.png lab2_list-3.png lab2_list-4.png"

EXPECTED="$SOURCES $DATA $GRAPHS"
ADD_PGM=./lab2_add
LIST_PGM=./lab2_list

PGMS="$ADD_PGM $LIST_PGM"

TIMEOUT=1

let errors=0

if [ -z "$1" ]
then
    echo usage: $0 your-student-id
    exit 1
else
    student=$1
fi

# make sure the tarball has the right name
tarball="$LAB-$student.tar.gz"
if [ ! -s $tarball ]
then
    echo "ERROR: Unable to find submission tarball:" $tarball
    exit 1
fi

# make sure we can untar it
TEMP="/tmp/TestTemp.$$"
echo "... Using temporary testing directory" $TEMP
function cleanup {
    cd
    rm -rf $TEMP
    exit $1
}

mkdir $TEMP
cp $tarball $TEMP
cd $TEMP
echo "... untaring" $tarbsll
tar xvf $tarball
if [ $? -ne 0 ]
then
    echo "ERROR: Error untarring $tarball"
    cleanup 1
fi

# make sure we find all the expected files
echo "... checking for expected files"
for i in $README $MAKEFILE $EXPECTED
do
    if [ ! -s $i ]
	then
	echo "ERROR: unable to find file" $i
	let errors+=1
	else
	echo "        $i ... OK"
	fi
done

echo "... checking for submitter info in $README"
function idString {
    result=`grep $1 $README | cut -d: -f2 | tr -d \[:blank:\] | tr -d "\r"`
    if [ -z "$result" ]
	then
	echo "ERROR - $README contains no $1";
	let errors+=1
	elif [ -z "$2" ]
	then
	# no match required
	echo "        $1 ... $result"
	else
	f1=`echo $result | cut -f1 -d,`
	f2=`echo $result | cut -f2 -d,`
	if [ "$f1" == "$2" ]
	    then
	    echo "        $1 ... $f1"
	    elif [ -n "$f2" -a "$2" == "$f2" ]
	    then
	    echo "        $1 ... $f1,$f2"
	    else
	    echo "ERROR: $1 does not include $2"
	    let errors+=1
	    fi
	fi
}

idString "NAME:"
idString "EMAIL:"
idString "ID:" $student

function makeTarget {
    result=`grep $1: $MAKEFILE`
    if [ $? -ne 0 ]
	then
	echo "ERROR: no $1 target in $MAKEFILE"
	let errors+=1
	else
	echo "        $1 ... OK"
	fi
}

echo "... checking for expected make targets"
makeTarget "clean"
makeTarget "dist"
makeTarget "tests"
makeTarget "graphs"

# make sure we find files with all the expected suffixes
echo "... checking for other files of expected types"
for s in $EXPECTEDS
do
    names=`echo *.$s`
    if [ "$names" = '*'.$s ]
	then
	echo "ERROR: unable to find any .$s files"
	let errors+=1
	else
	for f in $names
	do
	    echo "        $f ... OK"
	    done
	fi
done

echo "... usage of expected library functions"
for r in sched_yield pthread_mutex_lock pthread_mutex_unlock __sync_val_compare_and_swap __sync_lock_test_and_set __sync_lock_release
do
    grep $r *.c > /dev/null
    if [ $? -ne 0 ] 
	then
	echo "No calls to $r"
	let errors+=1
	else
	echo "        $r ... OK"
	fi
done

# make sure we can build the expected program
echo "... building default target(s)"
make 2> STDERR
RET=$?
if [ $RET -ne 0 ]
then
    echo "ERROR: default make fails RC=$RET"
    let errors+=1
fi
if [ -s STDERR ]
then
    echo "ERROR: make produced output to stderr:"
    cat STDERR
    let errors+=1
fi

# test a make clean
echo "... make clean"
make clean 2> STDERR
RET=$?
if [ $RET -ne 0 ]
then
    echo "ERROR: make clean fails RC=$RET"
    let errors+=1
fi
if [ -s STDERR ]
then
    echo "ERROR: make clean produced output to stderr:"
    cat STDERR
    let errors+=1
fi

# make sure that all products are removed
echo "... confirming removal of Makefile products"
for t in $PGMS $GRAPHS $DATA $tarball
do 
    if [ -s $t ]
	then
	echo "ERROR: make clean leaves $t"
	let errors+=1
	fi
done

# make sure the intermediates are removed
echo "... confirming removal of object modules and debug symbols"
for t in *.o *.dSYM
do
    if [ -s $t ]
	then
	echo "ERROR: make clean leaves $t"
	let errors+=1
	fi
done

# test a make dist
echo "... make dist"
make dist 2> STDERR
RET=$?
if [ $RET -ne 0 ]
then
    echo "ERROR: make dist fails RC=$RET"
    let errors+=1if [ -s STDERR ]
then
    echo "testrc $? 1
if [ ! -s STif [ $fields -echo ".tf=5
    v=`cat STDOUT | cutthen
    f=8
    v=`cat STDOUT |